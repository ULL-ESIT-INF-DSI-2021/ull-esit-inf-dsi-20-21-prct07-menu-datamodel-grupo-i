{"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-i/src/alimento.ts":{"path":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-i/src/alimento.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":22}},"2":{"start":{"line":17,"column":8},"end":{"line":17,"column":25}},"3":{"start":{"line":18,"column":8},"end":{"line":18,"column":33}},"4":{"start":{"line":19,"column":8},"end":{"line":19,"column":35}},"5":{"start":{"line":20,"column":8},"end":{"line":20,"column":27}},"6":{"start":{"line":21,"column":8},"end":{"line":21,"column":27}},"7":{"start":{"line":28,"column":8},"end":{"line":28,"column":25}},"8":{"start":{"line":35,"column":8},"end":{"line":35,"column":29}},"9":{"start":{"line":42,"column":8},"end":{"line":42,"column":30}},"10":{"start":{"line":49,"column":8},"end":{"line":49,"column":26}},"11":{"start":{"line":56,"column":8},"end":{"line":56,"column":26}},"12":{"start":{"line":59,"column":8},"end":{"line":65,"column":47}},"13":{"start":{"line":68,"column":0},"end":{"line":68,"column":20}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":16,"column":4},"end":{"line":16,"column":5}},"loc":{"start":{"line":16,"column":57},"end":{"line":22,"column":5}},"line":16},"1":{"name":"(anonymous_1)","decl":{"start":{"line":27,"column":4},"end":{"line":27,"column":5}},"loc":{"start":{"line":27,"column":14},"end":{"line":29,"column":5}},"line":27},"2":{"name":"(anonymous_2)","decl":{"start":{"line":34,"column":4},"end":{"line":34,"column":5}},"loc":{"start":{"line":34,"column":15},"end":{"line":36,"column":5}},"line":34},"3":{"name":"(anonymous_3)","decl":{"start":{"line":41,"column":4},"end":{"line":41,"column":5}},"loc":{"start":{"line":41,"column":19},"end":{"line":43,"column":5}},"line":41},"4":{"name":"(anonymous_4)","decl":{"start":{"line":48,"column":4},"end":{"line":48,"column":5}},"loc":{"start":{"line":48,"column":15},"end":{"line":50,"column":5}},"line":48},"5":{"name":"(anonymous_5)","decl":{"start":{"line":55,"column":4},"end":{"line":55,"column":5}},"loc":{"start":{"line":55,"column":15},"end":{"line":57,"column":5}},"line":55},"6":{"name":"(anonymous_6)","decl":{"start":{"line":58,"column":4},"end":{"line":58,"column":5}},"loc":{"start":{"line":58,"column":14},"end":{"line":66,"column":5}},"line":58}},"branchMap":{},"s":{"0":1,"1":1,"2":59,"3":59,"4":59,"5":59,"6":59,"7":1,"8":1,"9":253,"10":64,"11":64,"12":1,"13":1},"f":{"0":59,"1":1,"2":1,"3":253,"4":64,"5":64,"6":1},"b":{},"inputSourceMap":{"version":3,"file":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-i/src/alimento.ts","sources":["/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-i/src/alimento.ts"],"names":[],"mappings":";;;AAKA;;GAEG;AACH,MAAa,IAAI;IACf;;;;;;;OAOG;IACH,YAA6B,IAAY,EACtB,QAAgB,EAAmB,SAAmB,EACtD,KAAa,EAAmB,KAAY;QAFlC,SAAI,GAAJ,IAAI,CAAQ;QACtB,aAAQ,GAAR,QAAQ,CAAQ;QAAmB,cAAS,GAAT,SAAS,CAAU;QACtD,UAAK,GAAL,KAAK,CAAQ;QAAmB,UAAK,GAAL,KAAK,CAAO;IAE/D,CAAC;IACD;;;OAGG;IACI,OAAO;QACZ,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IACD;;;OAGG;IACI,QAAQ;QACb,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IACD;;;OAGG;IACI,YAAY;QACjB,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IACD;;;OAGG;IACI,QAAQ;QACb,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IACD;;;OAGG;IACI,QAAQ;QACb,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAEM,OAAO;QACZ,OAAO,WAAW,IAAI,CAAC,IAAI,GAAG,GAAG,YAAY,IAAI,CAAC,QAAQ,GAAG;YAC7D,YAAY,IAAI,CAAC,KAAK,QAAQ,GAAG,IAAI,IAAI,CAAC,KAAK,GAAG;YAClD,wBAAwB;YACxB,cAAc,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG;YAClC,aAAa,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG;YACjC,cAAc,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG;YAClC,eAAe,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC;IACrC,CAAC;CACF;AA3DD,oBA2DC","sourcesContent":["/**\n * Diferentes grupos a los que puede pertenecer un alimento\n */\ntype Grupo = \"Grupo1\" | \"Grupo2\" | \"Grupo3\" | \"Grupo4\" | \"Grupo5\";\n\n/**\n * Clase con la que representamos los alimentos\n */\nexport class Food {\n  /**\n   * Constructor de la clase\n   * @param name Nombre del alimento\n   * @param locality Localización de origen\n   * @param nutrients Composición nutricional del alimento\n   * @param price Precio por kg en euros\n   * @param group Grupo alimenticio al que pertenece\n   */\n  constructor(private readonly name: string,\n    private readonly locality: string, private readonly nutrients: number[],\n    private readonly price: number, private readonly group: Grupo) {\n\n  }\n  /**\n   * Getter de nombre\n   * @returns nombre del alimento\n   */\n  public getName() : string {\n    return this.name;\n  }\n  /**\n   * Getter de localización\n   * @returns localización de origen del alimento\n   */\n  public getLocal() : string {\n    return this.locality;\n  }\n  /**\n   * Getter de macronutrientes\n   * @returns macronutrientes y calorías del alimento\n   */\n  public getNutrients() : number[] {\n    return this.nutrients;\n  }\n  /**\n   * Getter de precio\n   * @returns precio en euros/kilo del alimento\n   */\n  public getPrice() : number {\n    return this.price;\n  }\n  /**\n   * Getter de grupo\n   * @returns grupo alimenticio\n   */\n  public getGroup() : Grupo {\n    return this.group;\n  }\n\n  public getInfo(): string {\n    return `Nombre: ${this.name},` + ` Origen: ${this.locality},` +\n    ` Precio: ${this.price} €/kg,` + ` ${this.group},` +\n    ` Nutrientes (100 g):\\n` +\n    ` Calorías: ${this.nutrients[0]},` +\n    ` Lipidos: ${this.nutrients[1]},` +\n    ` Hidratos: ${this.nutrients[2]},` +\n    ` Proteinas: ${this.nutrients[3]}`;\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"14d0efe7f05a64feceb30ffda503cf6f177777ca","contentHash":"0c7aad44c6154061d498d33a40afd04c4b3c96286a2cc9ff37d6a456b800acae"},"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-i/src/database/aliments.ts":{"path":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-i/src/database/aliments.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":979}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":85}},"3":{"start":{"line":6,"column":19},"end":{"line":6,"column":41}},"4":{"start":{"line":7,"column":0},"end":{"line":7,"column":101}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":89}},"6":{"start":{"line":9,"column":0},"end":{"line":9,"column":108}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":88}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":93}},"9":{"start":{"line":12,"column":0},"end":{"line":12,"column":113}},"10":{"start":{"line":13,"column":0},"end":{"line":13,"column":103}},"11":{"start":{"line":14,"column":0},"end":{"line":14,"column":90}},"12":{"start":{"line":15,"column":0},"end":{"line":15,"column":115}},"13":{"start":{"line":16,"column":0},"end":{"line":16,"column":105}},"14":{"start":{"line":17,"column":0},"end":{"line":17,"column":101}},"15":{"start":{"line":18,"column":0},"end":{"line":18,"column":111}},"16":{"start":{"line":19,"column":0},"end":{"line":19,"column":92}},"17":{"start":{"line":20,"column":0},"end":{"line":20,"column":88}},"18":{"start":{"line":21,"column":0},"end":{"line":21,"column":92}},"19":{"start":{"line":22,"column":0},"end":{"line":22,"column":97}},"20":{"start":{"line":23,"column":0},"end":{"line":23,"column":99}},"21":{"start":{"line":24,"column":0},"end":{"line":24,"column":90}},"22":{"start":{"line":25,"column":0},"end":{"line":25,"column":100}},"23":{"start":{"line":26,"column":0},"end":{"line":26,"column":93}},"24":{"start":{"line":27,"column":0},"end":{"line":27,"column":92}},"25":{"start":{"line":28,"column":0},"end":{"line":28,"column":94}},"26":{"start":{"line":29,"column":0},"end":{"line":29,"column":96}},"27":{"start":{"line":30,"column":0},"end":{"line":30,"column":100}},"28":{"start":{"line":31,"column":0},"end":{"line":31,"column":96}},"29":{"start":{"line":32,"column":0},"end":{"line":32,"column":109}},"30":{"start":{"line":33,"column":0},"end":{"line":33,"column":105}},"31":{"start":{"line":34,"column":0},"end":{"line":34,"column":106}},"32":{"start":{"line":35,"column":0},"end":{"line":35,"column":101}},"33":{"start":{"line":36,"column":0},"end":{"line":36,"column":105}},"34":{"start":{"line":37,"column":0},"end":{"line":37,"column":90}},"35":{"start":{"line":38,"column":0},"end":{"line":38,"column":105}},"36":{"start":{"line":39,"column":0},"end":{"line":39,"column":126}},"37":{"start":{"line":40,"column":0},"end":{"line":40,"column":118}},"38":{"start":{"line":41,"column":0},"end":{"line":41,"column":120}},"39":{"start":{"line":42,"column":0},"end":{"line":42,"column":104}},"40":{"start":{"line":43,"column":0},"end":{"line":43,"column":98}},"41":{"start":{"line":44,"column":0},"end":{"line":44,"column":109}},"42":{"start":{"line":45,"column":0},"end":{"line":45,"column":89}},"43":{"start":{"line":46,"column":0},"end":{"line":46,"column":91}},"44":{"start":{"line":47,"column":0},"end":{"line":47,"column":90}},"45":{"start":{"line":48,"column":0},"end":{"line":48,"column":93}},"46":{"start":{"line":49,"column":0},"end":{"line":49,"column":88}},"47":{"start":{"line":50,"column":0},"end":{"line":50,"column":93}},"48":{"start":{"line":51,"column":0},"end":{"line":51,"column":89}},"49":{"start":{"line":52,"column":0},"end":{"line":52,"column":95}},"50":{"start":{"line":53,"column":0},"end":{"line":53,"column":89}},"51":{"start":{"line":54,"column":0},"end":{"line":54,"column":98}},"52":{"start":{"line":55,"column":0},"end":{"line":55,"column":95}},"53":{"start":{"line":56,"column":0},"end":{"line":56,"column":93}},"54":{"start":{"line":57,"column":0},"end":{"line":57,"column":108}},"55":{"start":{"line":58,"column":0},"end":{"line":58,"column":113}},"56":{"start":{"line":59,"column":0},"end":{"line":59,"column":101}},"57":{"start":{"line":60,"column":0},"end":{"line":60,"column":93}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-i/src/database/aliments.ts","sources":["/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-i/src/database/aliments.ts"],"names":[],"mappings":"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","sourcesContent":["\n/* eslint-disable no-unused-vars */\nimport {Food} from \"../alimento\";\n\nexport const Almendrado: Food = new Food('Almendrado',\n    'España', [431, 9, 57, 18.1], 5.05, 'Grupo1');\n\nexport const Pollo: Food = new Food('Pollo',\n    'España', [167, 20, 0, 9.7], 4.3, 'Grupo1');\n\nexport const CerdoChuleta: Food = new Food('Cerdo chuleta',\n    'España', [327, 15.4, 0, 29.5], 6.98, 'Grupo1');\n\nexport const Atun: Food = new Food('Atun',\n    'España', [200, 23, 0, 12], 10.90, 'Grupo1');\n\nexport const Salmon: Food = new Food('Salmon',\n    'España', [182, 18.4, 0, 12], 8.99, 'Grupo1');\n\nexport const HuevoGallina: Food = new Food('Huevo de gallina',\n    'España', [153, 12.5, 0.7, 11.1], 3.19, 'Grupo1');\n\nexport const Garbanzos: Food = new Food('Garbanzos',\n    'España', [332, 21.3, 49.6, 5.4], 2.05, 'Grupo1');\n\nexport const Tofu: Food = new Food('Tofu',\n    'España', [74, 8.1, 0.7, 4.2], 6.50, 'Grupo1');\n\nexport const NuecesConCascara: Food = new Food('Nueces con cascara',\n    'España', [611, 14, 3.3, 59], 6.84, 'Grupo1');\n\nexport const CocoRallado: Food = new Food('Coco rallado',\n    'España', [373, 3.2, 3.7, 36], 3.29, 'Grupo1');\n\nexport const Lentejas: Food = new Food('Lentejas',\n    'España', [310, 24.3, 48.8, 1.9], 1.45, 'Grupo1');\n\nexport const TerneraChuleta: Food = new Food('Ternera, chuleta',\n    'España', [253, 17, 0, 20.5], 7.40, 'Grupo1');\n\nexport const Conejo: Food = new Food('Conejo',\n    'España', [133, 23, 0, 4.6], 5.95, 'Grupo1');\n\n\nexport const Ajo: Food = new Food('Ajo',\n    'España', [118, 5.3, 23, 0.3], 1.19, 'Grupo2');\n\nexport const Cebolla: Food = new Food('Cebolla',\n    'España', [33, 1.2, 7, 0], 2.55, 'Grupo2');\n\nexport const Lechuga: Food = new Food('Lechuga',\n    'España', [14, 1.34, 1.4, 0.2], 0.96, 'Grupo2');\n\nexport const PapasNuevas: Food = new Food('Papas',\n    'España', [77, 1.7, 16.1, 0.3], 1.33, 'Grupo2');\n\nexport const Setas: Food = new Food('Setas',\n    'España', [31, 1.8, 4, 0.3], 6.76, 'Grupo2');\n\nexport const Zanahoria: Food = new Food('Zanahoria',\n    'España', [40, 0.9, 7.3, 0.2], 0.69, 'Grupo2');\n\nexport const Tomate: Food = new Food('Tomate',\n    'España', [22, 1, 3.5, 0.11], 1.99, 'Grupo2');\n\nexport const Puerro: Food = new Food('Puerro',\n    'España', [48, 2, 7.5, 0.4], 6.98, 'Grupo2');\n\nexport const Pepino: Food = new Food('Pepino',\n    'España', [13, 0.7, 1.9, 0.2], 1.39, 'Grupo2');\n\nexport const Repollo: Food = new Food('Repollo',\n    'España', [36, 3.3, 3.4, 0.4], 0.99, 'Grupo2');\n\nexport const Calabacin: Food = new Food('Calabacin',\n    'España', [14, 0.6, 2.2, 0.2], 1.45, 'Grupo2');\n\nexport const Champinion: Food = new Food('Champiñon',\n    'España', [31, 1.8, 4, 0.3], 5, 'Grupo2');\n\nexport const PimientoVerde: Food = new Food('Pimiento Verde',\n    'España', [23, 0.9, 3.7, 0.2], 2.58, 'Grupo2');\n\nexport const PimientoRojo: Food = new Food('Pimiento Rojo',\n    'España', [37, 1, 6.4, 0.4], 1.75, 'Grupo2');\n\n\nexport const LecheCabra: Food = new Food('Lecha de cabra',\n    'España', [69, 3.4, 4.5, 3.9], 0.64, 'Grupo3');\n\nexport const Mantequilla: Food = new Food('Mantequilla',\n    'España', [749, 0.6, 0, 83], 1.7, 'Grupo3');\n\nexport const FlanHuevo: Food = new Food('Flan de huevo',\n    'España', [127, 4.9, 21.6, 2.3], 2.7, 'Grupo3');\n\nexport const Nata: Food = new Food('Nata',\n    'España', [448, 1.5, 2, 48.2], 3.45, 'Grupo3');\n\nexport const QuesoBurgos: Food = new Food('Queso de burgos',\n    'España', [175, 15, 4, 11], 6.95, 'Grupo3');\n\nexport const YogurLiquidoSabores: Food = new Food('Yogur liquido de sabores',\n    'España', [75, 2.9, 12.8, 1.4], 2.38, 'Grupo3');\n\nexport const MousseChocolate: Food = new Food('Mousse de chocolate',\n    'España', [190, 5.1, 22.7, 8.8], 2.63, 'Grupo3');\n\nexport const YogurNaturalEntero: Food = new Food('Yogur entero natural',\n    'España', [57, 3.7, 4.4, 2.7], 1.99, 'Grupo3');\n\nexport const QuesoGouda: Food = new Food('Queso Gouda',\n    'España', [331, 25.5, 0, 25.4], 5.35, 'Grupo3');\n\nexport const Helado: Food = new Food('Helado',\n    'España', [221, 4.5, 25.4, 10.1], 16.12, 'Grupo3');\n\nexport const BaticoCacao: Food = new Food('Batido de cacao',\n    'España', [98, 3.8, 10.9, 4.3], 0.85, 'Grupo3');\n\n\nexport const Fresa: Food = new Food('Fresa',\n    'España', [40, 0.7, 7, 0.5], 2.5, 'Grupo5');\n\nexport const Kiwi: Food = new Food('Kiwi',\n    'España', [55, 1.1, 10.6, 0.5], 2.45, 'Grupo5');\n\nexport const Limon: Food = new Food('Limon',\n    'España', [44, 0.7, 9, 0.4], 1.61, 'Grupo5');\n\nexport const Manzana: Food = new Food('Manzana',\n    'España', [53, 0.3, 12, 0], 1.19, 'Grupo5');\n\nexport const Melon: Food = new Food('Melon',\n    'España', [28, 0.6, 6, 0], 2.35, 'Grupo5');\n\nexport const Naranja: Food = new Food('Naranja',\n    'España', [42, 0.8, 8.6, 0], 0.8, 'Grupo5');\n\nexport const Piña: Food = new Food('Piña',\n    'España', [50, 0.5, 11.5, 0], 0.88, 'Grupo5');\n\nexport const Platano: Food = new Food('Platano',\n    'España', [94, 1.2, 20, 0.3], 1.99, 'Grupo5');\n\nexport const Pera: Food = new Food('Pera',\n    'España', [49, 0.4, 10.6, 0], 1.33, 'Grupo5');\n\nexport const Membrillo: Food = new Food('Membrillo',\n    'España', [42, 0.4, 6.8, 0], 2.25, 'Grupo5');\n\nexport const Aguacate: Food = new Food('Aguacate',\n    'España', [141, 1.5, 5.9, 12], 4, 'Grupo5');\n\nexport const Mango: Food = new Food('Mango',\n    'España', [67, 0.7, 14.1, 0.2], 2.25, 'Grupo5');\n\n\nexport const PanBlanco: Food = new Food('Pan blanco de molde',\n    'España', [287, 8, 52, 4.2], 4.33, 'Grupo4');\n\nexport const PanTostado: Food = new Food('Pan blanco tostado',\n    'España', [309, 10.1, 59.2, 2.5], 5.90, 'Grupo4');\n\nexport const PanRallado: Food = new Food('Pan rallado',\n    'España', [277, 7.8, 58, 1], 8.75, 'Grupo4');\n\nexport const Pasta: Food = new Food('Pasta',\n    'España', [375, 12, 75.8, 1.8], 2.98, 'Grupo4');\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"cb744caeed3c5ec33eb3ad18d44e8f52b791ac94","contentHash":"297fbe5f0509e1901f041490644e06181286197afe083a58849d70e8010067be"},"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-i/src/menu.ts":{"path":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-i/src/menu.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":22}},"2":{"start":{"line":12,"column":8},"end":{"line":12,"column":27}},"3":{"start":{"line":19,"column":27},"end":{"line":19,"column":32}},"4":{"start":{"line":20,"column":30},"end":{"line":20,"column":35}},"5":{"start":{"line":21,"column":31},"end":{"line":21,"column":36}},"6":{"start":{"line":22,"column":25},"end":{"line":22,"column":30}},"7":{"start":{"line":23,"column":23},"end":{"line":23,"column":24}},"8":{"start":{"line":26,"column":8},"end":{"line":43,"column":11}},"9":{"start":{"line":27,"column":12},"end":{"line":30,"column":13}},"10":{"start":{"line":28,"column":16},"end":{"line":28,"column":27}},"11":{"start":{"line":29,"column":16},"end":{"line":29,"column":36}},"12":{"start":{"line":31,"column":12},"end":{"line":34,"column":13}},"13":{"start":{"line":32,"column":16},"end":{"line":32,"column":39}},"14":{"start":{"line":33,"column":16},"end":{"line":33,"column":27}},"15":{"start":{"line":35,"column":12},"end":{"line":38,"column":13}},"16":{"start":{"line":36,"column":16},"end":{"line":36,"column":40}},"17":{"start":{"line":37,"column":16},"end":{"line":37,"column":27}},"18":{"start":{"line":39,"column":12},"end":{"line":42,"column":13}},"19":{"start":{"line":40,"column":16},"end":{"line":40,"column":34}},"20":{"start":{"line":41,"column":16},"end":{"line":41,"column":27}},"21":{"start":{"line":44,"column":8},"end":{"line":49,"column":9}},"22":{"start":{"line":45,"column":12},"end":{"line":45,"column":25}},"23":{"start":{"line":48,"column":12},"end":{"line":48,"column":24}},"24":{"start":{"line":57,"column":23},"end":{"line":57,"column":24}},"25":{"start":{"line":58,"column":24},"end":{"line":58,"column":25}},"26":{"start":{"line":59,"column":23},"end":{"line":59,"column":24}},"27":{"start":{"line":60,"column":22},"end":{"line":60,"column":23}},"28":{"start":{"line":61,"column":31},"end":{"line":61,"column":33}},"29":{"start":{"line":62,"column":8},"end":{"line":67,"column":9}},"30":{"start":{"line":62,"column":21},"end":{"line":62,"column":22}},"31":{"start":{"line":63,"column":12},"end":{"line":63,"column":58}},"32":{"start":{"line":64,"column":12},"end":{"line":64,"column":59}},"33":{"start":{"line":65,"column":12},"end":{"line":65,"column":58}},"34":{"start":{"line":66,"column":12},"end":{"line":66,"column":57}},"35":{"start":{"line":68,"column":8},"end":{"line":68,"column":68}},"36":{"start":{"line":69,"column":8},"end":{"line":69,"column":32}},"37":{"start":{"line":77,"column":36},"end":{"line":77,"column":38}},"38":{"start":{"line":78,"column":8},"end":{"line":80,"column":9}},"39":{"start":{"line":78,"column":21},"end":{"line":78,"column":22}},"40":{"start":{"line":79,"column":12},"end":{"line":79,"column":69}},"41":{"start":{"line":81,"column":8},"end":{"line":81,"column":35}},"42":{"start":{"line":89,"column":21},"end":{"line":89,"column":22}},"43":{"start":{"line":90,"column":8},"end":{"line":92,"column":9}},"44":{"start":{"line":90,"column":21},"end":{"line":90,"column":22}},"45":{"start":{"line":91,"column":12},"end":{"line":91,"column":47}},"46":{"start":{"line":93,"column":8},"end":{"line":93,"column":33}},"47":{"start":{"line":100,"column":18},"end":{"line":100,"column":20}},"48":{"start":{"line":101,"column":8},"end":{"line":103,"column":9}},"49":{"start":{"line":101,"column":21},"end":{"line":101,"column":22}},"50":{"start":{"line":102,"column":12},"end":{"line":102,"column":50}},"51":{"start":{"line":104,"column":8},"end":{"line":104,"column":19}},"52":{"start":{"line":107,"column":0},"end":{"line":107,"column":20}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":11,"column":4},"end":{"line":11,"column":5}},"loc":{"start":{"line":11,"column":23},"end":{"line":13,"column":5}},"line":11},"1":{"name":"(anonymous_1)","decl":{"start":{"line":18,"column":4},"end":{"line":18,"column":5}},"loc":{"start":{"line":18,"column":20},"end":{"line":50,"column":5}},"line":18},"2":{"name":"(anonymous_2)","decl":{"start":{"line":26,"column":27},"end":{"line":26,"column":28}},"loc":{"start":{"line":26,"column":38},"end":{"line":43,"column":9}},"line":26},"3":{"name":"(anonymous_3)","decl":{"start":{"line":56,"column":4},"end":{"line":56,"column":5}},"loc":{"start":{"line":56,"column":33},"end":{"line":70,"column":5}},"line":56},"4":{"name":"(anonymous_4)","decl":{"start":{"line":76,"column":4},"end":{"line":76,"column":5}},"loc":{"start":{"line":76,"column":29},"end":{"line":82,"column":5}},"line":76},"5":{"name":"(anonymous_5)","decl":{"start":{"line":88,"column":4},"end":{"line":88,"column":5}},"loc":{"start":{"line":88,"column":18},"end":{"line":94,"column":5}},"line":88},"6":{"name":"(anonymous_6)","decl":{"start":{"line":99,"column":4},"end":{"line":99,"column":5}},"loc":{"start":{"line":99,"column":14},"end":{"line":105,"column":5}},"line":99}},"branchMap":{"0":{"loc":{"start":{"line":27,"column":12},"end":{"line":30,"column":13}},"type":"if","locations":[{"start":{"line":27,"column":12},"end":{"line":30,"column":13}},{"start":{"line":27,"column":12},"end":{"line":30,"column":13}}],"line":27},"1":{"loc":{"start":{"line":27,"column":16},"end":{"line":27,"column":74}},"type":"binary-expr","locations":[{"start":{"line":27,"column":16},"end":{"line":27,"column":49}},{"start":{"line":27,"column":53},"end":{"line":27,"column":74}}],"line":27},"2":{"loc":{"start":{"line":31,"column":12},"end":{"line":34,"column":13}},"type":"if","locations":[{"start":{"line":31,"column":12},"end":{"line":34,"column":13}},{"start":{"line":31,"column":12},"end":{"line":34,"column":13}}],"line":31},"3":{"loc":{"start":{"line":31,"column":16},"end":{"line":31,"column":81}},"type":"binary-expr","locations":[{"start":{"line":31,"column":16},"end":{"line":31,"column":53}},{"start":{"line":31,"column":57},"end":{"line":31,"column":81}}],"line":31},"4":{"loc":{"start":{"line":35,"column":12},"end":{"line":38,"column":13}},"type":"if","locations":[{"start":{"line":35,"column":12},"end":{"line":38,"column":13}},{"start":{"line":35,"column":12},"end":{"line":38,"column":13}}],"line":35},"5":{"loc":{"start":{"line":35,"column":16},"end":{"line":35,"column":83}},"type":"binary-expr","locations":[{"start":{"line":35,"column":16},"end":{"line":35,"column":54}},{"start":{"line":35,"column":58},"end":{"line":35,"column":83}}],"line":35},"6":{"loc":{"start":{"line":39,"column":12},"end":{"line":42,"column":13}},"type":"if","locations":[{"start":{"line":39,"column":12},"end":{"line":42,"column":13}},{"start":{"line":39,"column":12},"end":{"line":42,"column":13}}],"line":39},"7":{"loc":{"start":{"line":39,"column":16},"end":{"line":39,"column":70}},"type":"binary-expr","locations":[{"start":{"line":39,"column":16},"end":{"line":39,"column":47}},{"start":{"line":39,"column":51},"end":{"line":39,"column":70}}],"line":39},"8":{"loc":{"start":{"line":44,"column":8},"end":{"line":49,"column":9}},"type":"if","locations":[{"start":{"line":44,"column":8},"end":{"line":49,"column":9}},{"start":{"line":44,"column":8},"end":{"line":49,"column":9}}],"line":44}},"s":{"0":1,"1":1,"2":7,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":4,"10":1,"11":1,"12":4,"13":1,"14":1,"15":4,"16":1,"17":1,"18":4,"19":1,"20":1,"21":1,"22":0,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":3,"32":3,"33":3,"34":3,"35":1,"36":1,"37":1,"38":1,"39":1,"40":4,"41":1,"42":1,"43":1,"44":1,"45":3,"46":1,"47":1,"48":1,"49":1,"50":3,"51":1,"52":1},"f":{"0":7,"1":1,"2":4,"3":1,"4":1,"5":1,"6":1},"b":{"0":[1,3],"1":[4,1],"2":[1,3],"3":[4,1],"4":[1,3],"5":[4,1],"6":[1,3],"7":[4,1],"8":[0,1]},"inputSourceMap":{"version":3,"file":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-i/src/menu.ts","sources":["/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-i/src/menu.ts"],"names":[],"mappings":"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","sourcesContent":["import {Plate} from \"./plato\";\n\n/**\n * Lista con al menos tres platos\n */\nexport type menu=[x:Plate, y:Plate, z:Plate, ...dimensiones:Plate[]];\n/**\n * Clase con la que representar el menu\n */\nexport class Menu {\n  /**\n   * @param menus Lista de platos (minimmo 3 platos por menu)\n   */\n  constructor(private readonly menus:menu) {\n  }\n  /**\n   * Comprueba que el menu cumple con almenos 3 categorias diferentes\n   * @returns Verdadero o falso si se cumple o no la condición\n   */\n  comprobarMenu(): boolean {\n    let flagEntrante=false;\n    let flagPrimerplato=false;\n    let flagSegundoPlato=false;\n    let flagPostre=false;\n    let contador=0;\n    // Si el contador es 3 o mayor hay 3 categorias diferentes como minimo por\n    // lo que es valido\n    this.menus.forEach((plato) => {\n      if (plato.getCategory()== \"Entrante\" && flagEntrante==false) {\n        contador++;\n        flagEntrante=true;\n      }\n      if (plato.getCategory()== \"Primer plato\" && flagPrimerplato==false) {\n        flagPrimerplato=true;\n        contador++;\n      }\n      if (plato.getCategory()== \"Segundo plato\" && flagSegundoPlato==false) {\n        flagSegundoPlato=true;\n        contador++;\n      }\n      if (plato.getCategory()== \"Postre\" && flagPostre==false) {\n        flagPostre=true;\n        contador++;\n      }\n    });\n    if (contador<3) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  /**\n   * Método para calcular la composicion total de los platos\n   * que conforman el menu\n   * @returns retorna la composicion total del menu\n   */\n  composicionNutricionalMenu() {\n    let calorias=0;\n    let proteinas= 0;\n    let hidratos= 0;\n    let lipidos= 0;\n    let composicionTotal: number[] = [];\n    for (let i = 0; i < this.menus.length; i++) {\n      calorias+=this.menus[i].getComposition()[0];\n      proteinas+= this.menus[i].getComposition()[1];\n      hidratos+= this.menus[i].getComposition()[2];\n      lipidos+= this.menus[i].getComposition()[3];\n    }\n    composicionTotal = [calorias, proteinas, hidratos, lipidos];\n    return composicionTotal;\n  }\n  /**\n   * Método para retornar los grupos de alimentos predominantes de\n   * cada plato que contiene el menu\n   * @returns retorna la lista de grupo de alimentos\n   */\n  listadoGruposAlimentos(): string[] {\n    const listaGrupoAlimentos: string[] = [];\n    for (let i = 0; i < this.menus.length; i++) {\n      listaGrupoAlimentos.push(this.menus[i].getPredominant());\n    }\n    return listaGrupoAlimentos;\n  }\n  /**\n   * Método que retorna la suma del precio de cada\n   * plato que compone el menu\n   * @returns retorna el precio total del menu\n   */\n  precioTotal() {\n    let precio = 0;\n    for (let i = 0; i < this.menus.length; i++) {\n      precio+=this.menus[i].getPrice();\n    }\n    return precio.toFixed(2);\n  }\n  /**\n   * Write para imprimir todos los platos de un menu, con\n   * los ingredientes de cada uno\n   */\n  getInfo(): string {\n    let aux: string = '';\n    for (let i = 0; i < this.menus.length; i++) {\n      aux += this.menus[i].getInfo() + '\\n';\n    }\n    return aux;\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"3fed3f395566e91c4af2aba82898d877601cb541","contentHash":"7a6e73fedebcd5c8f760e5437aa11cf6020ec9cca507c951fa39c61dc0612934"},"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-i/src/plato.ts":{"path":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-i/src/plato.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":23}},"2":{"start":{"line":12,"column":8},"end":{"line":12,"column":29}},"3":{"start":{"line":13,"column":8},"end":{"line":13,"column":33}},"4":{"start":{"line":14,"column":8},"end":{"line":14,"column":27}},"5":{"start":{"line":15,"column":8},"end":{"line":15,"column":29}},"6":{"start":{"line":16,"column":8},"end":{"line":18,"column":9}},"7":{"start":{"line":17,"column":12},"end":{"line":17,"column":31}},"8":{"start":{"line":19,"column":8},"end":{"line":19,"column":24}},"9":{"start":{"line":20,"column":8},"end":{"line":20,"column":32}},"10":{"start":{"line":27,"column":23},"end":{"line":27,"column":24}},"11":{"start":{"line":28,"column":24},"end":{"line":28,"column":25}},"12":{"start":{"line":29,"column":23},"end":{"line":29,"column":24}},"13":{"start":{"line":30,"column":22},"end":{"line":30,"column":23}},"14":{"start":{"line":31,"column":8},"end":{"line":36,"column":9}},"15":{"start":{"line":31,"column":21},"end":{"line":31,"column":22}},"16":{"start":{"line":32,"column":12},"end":{"line":32,"column":79}},"17":{"start":{"line":33,"column":12},"end":{"line":33,"column":80}},"18":{"start":{"line":34,"column":12},"end":{"line":34,"column":79}},"19":{"start":{"line":35,"column":12},"end":{"line":35,"column":78}},"20":{"start":{"line":37,"column":8},"end":{"line":38,"column":78}},"21":{"start":{"line":44,"column":17},"end":{"line":44,"column":18}},"22":{"start":{"line":45,"column":17},"end":{"line":45,"column":18}},"23":{"start":{"line":46,"column":17},"end":{"line":46,"column":18}},"24":{"start":{"line":47,"column":17},"end":{"line":47,"column":18}},"25":{"start":{"line":48,"column":17},"end":{"line":48,"column":18}},"26":{"start":{"line":49,"column":8},"end":{"line":69,"column":9}},"27":{"start":{"line":49,"column":21},"end":{"line":49,"column":22}},"28":{"start":{"line":50,"column":12},"end":{"line":68,"column":13}},"29":{"start":{"line":52,"column":20},"end":{"line":52,"column":25}},"30":{"start":{"line":53,"column":20},"end":{"line":53,"column":26}},"31":{"start":{"line":55,"column":20},"end":{"line":55,"column":25}},"32":{"start":{"line":56,"column":20},"end":{"line":56,"column":26}},"33":{"start":{"line":58,"column":20},"end":{"line":58,"column":25}},"34":{"start":{"line":59,"column":20},"end":{"line":59,"column":26}},"35":{"start":{"line":61,"column":20},"end":{"line":61,"column":25}},"36":{"start":{"line":62,"column":20},"end":{"line":62,"column":26}},"37":{"start":{"line":64,"column":20},"end":{"line":64,"column":25}},"38":{"start":{"line":65,"column":20},"end":{"line":65,"column":26}},"39":{"start":{"line":67,"column":20},"end":{"line":67,"column":26}},"40":{"start":{"line":70,"column":8},"end":{"line":84,"column":9}},"41":{"start":{"line":71,"column":12},"end":{"line":71,"column":41}},"42":{"start":{"line":73,"column":13},"end":{"line":84,"column":9}},"43":{"start":{"line":74,"column":12},"end":{"line":74,"column":41}},"44":{"start":{"line":76,"column":13},"end":{"line":84,"column":9}},"45":{"start":{"line":77,"column":12},"end":{"line":77,"column":41}},"46":{"start":{"line":79,"column":13},"end":{"line":84,"column":9}},"47":{"start":{"line":80,"column":12},"end":{"line":80,"column":41}},"48":{"start":{"line":82,"column":13},"end":{"line":84,"column":9}},"49":{"start":{"line":83,"column":12},"end":{"line":83,"column":41}},"50":{"start":{"line":90,"column":25},"end":{"line":90,"column":26}},"51":{"start":{"line":91,"column":8},"end":{"line":93,"column":9}},"52":{"start":{"line":91,"column":21},"end":{"line":91,"column":22}},"53":{"start":{"line":92,"column":12},"end":{"line":92,"column":51}},"54":{"start":{"line":94,"column":8},"end":{"line":94,"column":37}},"55":{"start":{"line":101,"column":8},"end":{"line":101,"column":29}},"56":{"start":{"line":108,"column":8},"end":{"line":108,"column":26}},"57":{"start":{"line":116,"column":8},"end":{"line":116,"column":31}},"58":{"start":{"line":123,"column":8},"end":{"line":123,"column":37}},"59":{"start":{"line":130,"column":8},"end":{"line":130,"column":27}},"60":{"start":{"line":137,"column":8},"end":{"line":137,"column":33}},"61":{"start":{"line":144,"column":8},"end":{"line":149,"column":54}},"62":{"start":{"line":152,"column":0},"end":{"line":152,"column":22}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":11,"column":4},"end":{"line":11,"column":5}},"loc":{"start":{"line":11,"column":49},"end":{"line":21,"column":5}},"line":11},"1":{"name":"(anonymous_1)","decl":{"start":{"line":26,"column":4},"end":{"line":26,"column":5}},"loc":{"start":{"line":26,"column":18},"end":{"line":39,"column":5}},"line":26},"2":{"name":"(anonymous_2)","decl":{"start":{"line":43,"column":4},"end":{"line":43,"column":5}},"loc":{"start":{"line":43,"column":23},"end":{"line":85,"column":5}},"line":43},"3":{"name":"(anonymous_3)","decl":{"start":{"line":89,"column":4},"end":{"line":89,"column":5}},"loc":{"start":{"line":89,"column":15},"end":{"line":95,"column":5}},"line":89},"4":{"name":"(anonymous_4)","decl":{"start":{"line":100,"column":4},"end":{"line":100,"column":5}},"loc":{"start":{"line":100,"column":18},"end":{"line":102,"column":5}},"line":100},"5":{"name":"(anonymous_5)","decl":{"start":{"line":107,"column":4},"end":{"line":107,"column":5}},"loc":{"start":{"line":107,"column":14},"end":{"line":109,"column":5}},"line":107},"6":{"name":"(anonymous_6)","decl":{"start":{"line":115,"column":4},"end":{"line":115,"column":5}},"loc":{"start":{"line":115,"column":15},"end":{"line":117,"column":5}},"line":115},"7":{"name":"(anonymous_7)","decl":{"start":{"line":122,"column":4},"end":{"line":122,"column":5}},"loc":{"start":{"line":122,"column":21},"end":{"line":124,"column":5}},"line":122},"8":{"name":"(anonymous_8)","decl":{"start":{"line":129,"column":4},"end":{"line":129,"column":5}},"loc":{"start":{"line":129,"column":16},"end":{"line":131,"column":5}},"line":129},"9":{"name":"(anonymous_9)","decl":{"start":{"line":136,"column":4},"end":{"line":136,"column":5}},"loc":{"start":{"line":136,"column":21},"end":{"line":138,"column":5}},"line":136},"10":{"name":"(anonymous_10)","decl":{"start":{"line":143,"column":4},"end":{"line":143,"column":5}},"loc":{"start":{"line":143,"column":14},"end":{"line":150,"column":5}},"line":143}},"branchMap":{"0":{"loc":{"start":{"line":16,"column":8},"end":{"line":18,"column":9}},"type":"if","locations":[{"start":{"line":16,"column":8},"end":{"line":18,"column":9}},{"start":{"line":16,"column":8},"end":{"line":18,"column":9}}],"line":16},"1":{"loc":{"start":{"line":50,"column":12},"end":{"line":68,"column":13}},"type":"switch","locations":[{"start":{"line":51,"column":16},"end":{"line":53,"column":26}},{"start":{"line":54,"column":16},"end":{"line":56,"column":26}},{"start":{"line":57,"column":16},"end":{"line":59,"column":26}},{"start":{"line":60,"column":16},"end":{"line":62,"column":26}},{"start":{"line":63,"column":16},"end":{"line":65,"column":26}},{"start":{"line":66,"column":16},"end":{"line":67,"column":26}}],"line":50},"2":{"loc":{"start":{"line":70,"column":8},"end":{"line":84,"column":9}},"type":"if","locations":[{"start":{"line":70,"column":8},"end":{"line":84,"column":9}},{"start":{"line":70,"column":8},"end":{"line":84,"column":9}}],"line":70},"3":{"loc":{"start":{"line":73,"column":13},"end":{"line":84,"column":9}},"type":"if","locations":[{"start":{"line":73,"column":13},"end":{"line":84,"column":9}},{"start":{"line":73,"column":13},"end":{"line":84,"column":9}}],"line":73},"4":{"loc":{"start":{"line":76,"column":13},"end":{"line":84,"column":9}},"type":"if","locations":[{"start":{"line":76,"column":13},"end":{"line":84,"column":9}},{"start":{"line":76,"column":13},"end":{"line":84,"column":9}}],"line":76},"5":{"loc":{"start":{"line":79,"column":13},"end":{"line":84,"column":9}},"type":"if","locations":[{"start":{"line":79,"column":13},"end":{"line":84,"column":9}},{"start":{"line":79,"column":13},"end":{"line":84,"column":9}}],"line":79},"6":{"loc":{"start":{"line":82,"column":13},"end":{"line":84,"column":9}},"type":"if","locations":[{"start":{"line":82,"column":13},"end":{"line":84,"column":9}},{"start":{"line":82,"column":13},"end":{"line":84,"column":9}}],"line":82}},"s":{"0":1,"1":1,"2":22,"3":22,"4":22,"5":22,"6":22,"7":22,"8":22,"9":22,"10":22,"11":22,"12":22,"13":22,"14":22,"15":22,"16":63,"17":63,"18":63,"19":63,"20":22,"21":22,"22":22,"23":22,"24":22,"25":22,"26":22,"27":22,"28":63,"29":11,"30":11,"31":23,"32":23,"33":12,"34":12,"35":5,"36":5,"37":12,"38":12,"39":0,"40":22,"41":8,"42":14,"43":6,"44":8,"45":5,"46":3,"47":1,"48":2,"49":2,"50":22,"51":22,"52":22,"53":63,"54":22,"55":16,"56":0,"57":4,"58":13,"59":0,"60":9,"61":6,"62":1},"f":{"0":22,"1":22,"2":22,"3":22,"4":16,"5":0,"6":4,"7":13,"8":0,"9":9,"10":6},"b":{"0":[22,0],"1":[11,23,12,5,12,0],"2":[8,14],"3":[6,8],"4":[5,3],"5":[1,2],"6":[2,0]},"inputSourceMap":{"version":3,"file":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-i/src/plato.ts","sources":["/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-i/src/plato.ts"],"names":[],"mappings":"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","sourcesContent":["import {Food} from \"./alimento\";\n/**\n * Distintas categorías que puede tener un plato\n */\ntype Categoria = \"Entrante\" | \"Primer plato\" | \"Segundo plato\" | \"Postre\";\n\nexport class Plate {\n  private TotalComposition: number[];\n  private TotalPrice: number;\n  private Predominante: string;\n  /**\n   * Constructor de la clase\n   * @param category La categoria del plato\n   * @param foods Lista de alimentos que componen el plato\n   * @param amount Cantidad de cada alimento del plato\n   */\n  constructor(private readonly nombre: string,\n    private readonly category: Categoria,\n    private readonly foods: Food[],\n    private readonly amount: number[]) {\n    if (this.foods.length==this.amount.length) {\n      this.composition();\n    }\n    this.addPrice();\n    this.foodPredominante();\n  }\n\n  /**\n   * Composición nutricional del plato. Suma la composición nutricional\n   * de los alimentos\n   */\n  private composition() {\n    let calorias: number = 0;\n    let proteinas: number = 0;\n    let hidratos: number = 0;\n    let lipidos: number = 0;\n    for (let i = 0; i < this.foods.length; i++) {\n      calorias += this.foods[i].getNutrients()[0] * this.amount[i] / 100;\n      proteinas += this.foods[i].getNutrients()[1] * this.amount[i] / 100;\n      hidratos += this.foods[i].getNutrients()[2] * this.amount[i] / 100;\n      lipidos += this.foods[i].getNutrients()[3] * this.amount[i] / 100;\n    }\n    this.TotalComposition = [Math.trunc(calorias),\n      Math.trunc(proteinas), Math.trunc(hidratos), Math.trunc(lipidos)];\n  }\n\n  /**\n   * Nos permite determinar el grupo de alimento predominante del plato\n   */\n  private foodPredominante() {\n    let g1: number = 0;\n    let g2: number = 0;\n    let g3: number = 0;\n    let g4: number = 0;\n    let g5: number = 0;\n    for (let i = 0; i < this.foods.length; i++) {\n      switch (this.foods[i].getGroup()) {\n        case 'Grupo1':\n          g1++;\n          break;\n        case 'Grupo2':\n          g2++;\n          break;\n        case 'Grupo3':\n          g3++;\n          break;\n        case 'Grupo4':\n          g4++;\n          break;\n        case 'Grupo5':\n          g5++;\n          break;\n        default:\n          break;\n      }\n    }\n    if (g1 == Math.max(g1, g2, g3, g4, g5)) {\n      this.Predominante = \"Grupo1\";\n    } else if (g2 == Math.max(g1, g2, g3, g4, g5)) {\n      this.Predominante = \"Grupo2\";\n    } else if (g3 == Math.max(g1, g2, g3, g4, g5)) {\n      this.Predominante = \"Grupo3\";\n    } else if (g4 == Math.max(g1, g2, g3, g4, g5)) {\n      this.Predominante = \"Grupo4\";\n    } else if (g5 == Math.max(g1, g2, g3, g4, g5)) {\n      this.Predominante = \"Grupo5\";\n    }\n  }\n\n  /**\n   * Sumamos el precio de los alimentos, para determinar el precio del plato.\n   */\n  private addPrice() {\n    let acumulador: number = 0;\n    for (let i = 0; i < this.foods.length; i++) {\n      acumulador += this.foods[i].getPrice();\n    }\n    this.TotalPrice = acumulador;\n  }\n  /**\n   * getter de la categoria del plato\n   * @returns retorna la categoría del plato\n   */\n  getCategory() {\n    return this.category;\n  }\n  /**\n   * getter de la categoria del plato\n   * @returns retorna la categoría del plato\n   */\n  getFood(): Food[] {\n    return this.foods;\n  }\n  /**\n * Obtenemos la suma de los precios de todos lo alimentos de los que se\n * compone el plato\n * @returns Precio del plato\n */\n  public getPrice() : number {\n    return this.TotalPrice;\n  }\n\n  /**\n   * Obtenemos la composición nutricional del plato\n   * @returns Composición nutricional del plato\n   */\n  public getComposition() : number[] {\n    return this.TotalComposition;\n  }\n\n  /**\n   * Obtenemos el nombre del plato\n   * @returns Nombre del plato\n   */\n  public getNombre(): string {\n    return this.nombre;\n  }\n\n  /**\n   * Obtenemos el grupo predominante de alimentos que componen el plato\n   * @returns El nombre del grupo predominante\n   */\n  public getPredominant() : string {\n    return this.Predominante;\n  }\n  /**\n   * Obtenemos la información del plato de manera clara.\n   * @returns La información del plato.\n   */\n  getInfo(): string {\n    return `Nombre: ${this.nombre}` + ` Precio: ${this.TotalPrice} € / Kg` +\n      ` Nutrientes (100 g):\\n` +\n      ` Calorías: ${this.TotalComposition[0]},` +\n      ` Lipidos: ${this.TotalComposition[1]},` +\n      ` Hidratos: ${this.TotalComposition[2]},` +\n      ` Proteinas: ${this.TotalComposition[3]}`;\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"a94868f13d589ea506697cce740ad302274c6d72","contentHash":"d9fa398977f3c8ce8468371e206cb948071d53e66223d4d9265e62cc03d0da3e"},"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-i/src/carta.ts":{"path":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-i/src/carta.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":23}},"2":{"start":{"line":14,"column":8},"end":{"line":14,"column":27}},"3":{"start":{"line":15,"column":8},"end":{"line":15,"column":29}},"4":{"start":{"line":22,"column":8},"end":{"line":22,"column":26}},"5":{"start":{"line":30,"column":8},"end":{"line":30,"column":27}},"6":{"start":{"line":37,"column":8},"end":{"line":39,"column":11}},"7":{"start":{"line":38,"column":12},"end":{"line":38,"column":29}},"8":{"start":{"line":40,"column":8},"end":{"line":42,"column":11}},"9":{"start":{"line":41,"column":12},"end":{"line":41,"column":31}},"10":{"start":{"line":45,"column":0},"end":{"line":45,"column":22}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":13,"column":4},"end":{"line":13,"column":5}},"loc":{"start":{"line":13,"column":31},"end":{"line":16,"column":5}},"line":13},"1":{"name":"(anonymous_1)","decl":{"start":{"line":21,"column":4},"end":{"line":21,"column":5}},"loc":{"start":{"line":21,"column":15},"end":{"line":23,"column":5}},"line":21},"2":{"name":"(anonymous_2)","decl":{"start":{"line":29,"column":4},"end":{"line":29,"column":5}},"loc":{"start":{"line":29,"column":16},"end":{"line":31,"column":5}},"line":29},"3":{"name":"(anonymous_3)","decl":{"start":{"line":36,"column":4},"end":{"line":36,"column":5}},"loc":{"start":{"line":36,"column":14},"end":{"line":43,"column":5}},"line":36},"4":{"name":"(anonymous_4)","decl":{"start":{"line":37,"column":27},"end":{"line":37,"column":28}},"loc":{"start":{"line":37,"column":39},"end":{"line":39,"column":9}},"line":37},"5":{"name":"(anonymous_5)","decl":{"start":{"line":40,"column":28},"end":{"line":40,"column":29}},"loc":{"start":{"line":40,"column":42},"end":{"line":42,"column":9}},"line":40}},"branchMap":{},"s":{"0":1,"1":1,"2":2,"3":2,"4":1,"5":1,"6":1,"7":1,"8":1,"9":2,"10":1},"f":{"0":2,"1":1,"2":1,"3":1,"4":1,"5":2},"b":{},"inputSourceMap":{"version":3,"file":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-i/src/carta.ts","sources":["/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-i/src/carta.ts"],"names":[],"mappings":";;;AAEA;;GAEG;AACH,MAAa,KAAK;IAChB;;;;OAIG;IACH,YAAmB,KAAY,EAAmB,MAAc;QAA7C,UAAK,GAAL,KAAK,CAAO;QAAmB,WAAM,GAAN,MAAM,CAAQ;IAChE,CAAC;IACD;;;OAGG;IACH,QAAQ;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IACD;;;;OAIG;IACH,SAAS;QACP,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED;;;OAGG;IACH,OAAO;QACL,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YAC5B,MAAM,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YAC/B,QAAQ,CAAC,OAAO,EAAE,CAAC;QACrB,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AApCD,sBAoCC","sourcesContent":["import {Menu} from \"./menu\";\nimport {Plate} from \"./plato\";\n/**\n * Clase que representa una Carta respecto a una serie de munús prediseñados\n */\nexport class Carta {\n  /**\n   * Constructor de la clase\n   * @param menus Menus de la carta\n   * @param platos Platos de la carta\n   */\n  constructor(public menus:Menu[], private readonly platos:Plate[]) {\n  }\n  /**\n   * getter de los menus que contiene la carta\n   * @returns Menus de la carta\n   */\n  getMenus() {\n    return this.menus;\n  }\n  /**\n   * getter de platos con los que se pueden hacer\n   * menus prsonalizados\n   * @returns Platos de la carta\n   */\n  getPlatos() {\n    return this.platos;\n  }\n\n  /**\n   * Nos proporciona una visualización mas clara de\n   * los platos y menus de la carta\n   */\n  getInfo() {\n    this.menus.forEach((objeto) => {\n      objeto.getInfo();\n    });\n    this.platos.forEach((elemento) => {\n      elemento.getInfo();\n    });\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b23f22b96dbc799023a212f0602f320d211f9743","contentHash":"c656aab792c5dff2eebfbd5be919f1a5766855fffba6311d08e434c07026f90d"},"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-i/src/database/dishes.ts":{"path":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-i/src/database/dishes.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":503}},"2":{"start":{"line":5,"column":16},"end":{"line":5,"column":35}},"3":{"start":{"line":6,"column":17},"end":{"line":6,"column":38}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":156}},"5":{"start":{"line":9,"column":0},"end":{"line":9,"column":145}},"6":{"start":{"line":10,"column":0},"end":{"line":10,"column":157}},"7":{"start":{"line":11,"column":0},"end":{"line":11,"column":140}},"8":{"start":{"line":12,"column":0},"end":{"line":12,"column":190}},"9":{"start":{"line":14,"column":0},"end":{"line":14,"column":185}},"10":{"start":{"line":15,"column":0},"end":{"line":15,"column":137}},"11":{"start":{"line":16,"column":0},"end":{"line":16,"column":171}},"12":{"start":{"line":17,"column":0},"end":{"line":17,"column":170}},"13":{"start":{"line":18,"column":0},"end":{"line":18,"column":156}},"14":{"start":{"line":20,"column":0},"end":{"line":20,"column":120}},"15":{"start":{"line":21,"column":0},"end":{"line":21,"column":127}},"16":{"start":{"line":22,"column":0},"end":{"line":22,"column":178}},"17":{"start":{"line":23,"column":0},"end":{"line":23,"column":154}},"18":{"start":{"line":24,"column":0},"end":{"line":24,"column":136}},"19":{"start":{"line":26,"column":0},"end":{"line":26,"column":146}},"20":{"start":{"line":27,"column":0},"end":{"line":27,"column":121}},"21":{"start":{"line":28,"column":0},"end":{"line":28,"column":176}},"22":{"start":{"line":29,"column":0},"end":{"line":29,"column":161}},"23":{"start":{"line":30,"column":0},"end":{"line":30,"column":158}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-i/src/database/dishes.ts","sources":["/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-i/src/database/dishes.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable max-len */\nimport {Plate} from \"../plato\";\nimport * as Alimento from \"./aliments\";\n// Entrantes\n\nexport const QuesoAsadoSetas: Plate = new Plate('Queso Asado con Setas', 'Entrante',\n    [Alimento.QuesoBurgos, Alimento.QuesoGouda, Alimento.Setas], [75, 75, 35]);\n\nexport const PanConTomate: Plate = new Plate('Pan con tomate', 'Entrante',\n    [Alimento.PanTostado, Alimento.PanBlanco, Alimento.Tomate], [50, 50, 29]);\n\nexport const PanConQueso: Plate = new Plate('Pan con varios quesos', 'Entrante',\n    [Alimento.PanTostado, Alimento.QuesoBurgos, Alimento.QuesoGouda], [95, 55, 55]);\n\nexport const TartarSalmonAguacate: Plate = new Plate('Tartar de salmon y aguacate', 'Entrante',\n    [Alimento.Salmon, Alimento.Aguacate], [50, 35]);\n\nexport const AguacatesRellenos: Plate = new Plate('Aguactes rellenos con nueces y queso burgos', 'Entrante',\n    [Alimento.Aguacate, Alimento.NuecesConCascara, Alimento.QuesoBurgos], [100, 30, 55]);\n\n// Primer Plate\n\nexport const LentejasCompuestas: Plate = new Plate('Lentejas compuestas', 'Primer plato',\n    [Alimento.Lentejas, Alimento.HuevoGallina, Alimento.Cebolla, Alimento.Platano], [200, 20, 33, 50]);\n\nexport const Ensalada = new Plate('Ensalada', 'Primer plato',\n    [Alimento.Tomate, Alimento.Lechuga, Alimento.Cebolla], [200, 120, 100]);\n\nexport const GarbanzosCompuestos: Plate = new Plate('Garanzos compuestos', 'Primer plato',\n    [Alimento.Garbanzos, Alimento.PimientoRojo, Alimento.HuevoGallina], [250, 95, 120]);\n\nexport const EnsaladaDePasta: Plate = new Plate('Ensalada de pasta', 'Primer plato',\n    [Alimento.Pasta, Alimento.Ajo, Alimento.Cebolla, Alimento.Zanahoria], [200, 50, 50, 33]);\n\nexport const CremaCalabacin: Plate = new Plate('Crema de calabacin', 'Primer plato',\n    [Alimento.Calabacin, Alimento.Puerro, Alimento.Champinion], [120, 20, 35]);\n\n// Segundo plato\n\nexport const PastaConAtun: Plate = new Plate('Pasta con Atún', 'Segundo plato',\n    [Alimento.Pasta, Alimento.Atun], [150, 20]);\n\nexport const PolloNaranja: Plate = new Plate('Pollo a la naranja', 'Segundo plato',\n    [Alimento.Pollo, Alimento.Naranja], [200, 20]);\n\nexport const ChuletasZT: Plate = new Plate('Chuletas de cerdo con zanahorias y tomate',\n    'Segundo plato', [Alimento.CerdoChuleta, Alimento.Zanahoria, Alimento.Tomate], [250, 30, 30]);\n\nexport const TerneraEncebollado: Plate = new Plate('Chuleta de ternera encebollada',\n    'Segundo plato', [Alimento.TerneraChuleta, Alimento.Cebolla], [200, 40]);\n\nexport const ConejoPapas: Plate = new Plate('Conejo con papas Nuevas',\n    'Segundo plato', [Alimento.Conejo, Alimento.PapasNuevas], [150, 40]);\n\n\n// Postre\n\nexport const MousseCasa: Plate = new Plate('Mousse de la casa', 'Postre',\n    [Alimento.MousseChocolate, Alimento.Naranja, Alimento.Fresa],\n    [95, 20, 36]);\n\nexport const HeladoPlatano: Plate = new Plate('Helado con platano', 'Postre',\n    [Alimento.Helado, Alimento.Platano], [80, 65]);\n\nexport const YogurFresasLimon: Plate = new Plate('Yogur natural entero con fresas y limon', 'Postre',\n    [Alimento.YogurNaturalEntero, Alimento.Fresa, Alimento.Limon],\n    [120, 55, 32]);\n\nexport const FlanHuevoHelado: Plate = new Plate('Flan de huevo con helado de fresas', 'Postre',\n    [Alimento.FlanHuevo, Alimento.Helado, Alimento.Fresa], [95, 55, 31]);\n\nexport const HeladoCasa: Plate = new Plate('Helado de la casa', 'Postre',\n    [Alimento.Helado, Alimento.Limon, Alimento.Nata, Alimento.Platano], [250, 50, 75, 100]);\n\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"333a4191ab87ad104b5f25675bc9fa11d75f46e1","contentHash":"780d33717478e293541e908d50afbddc545dad64ca99ba389002668e76a76dad"},"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-i/src/database/menus.ts":{"path":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-i/src/database/menus.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":87}},"2":{"start":{"line":4,"column":15},"end":{"line":4,"column":33}},"3":{"start":{"line":5,"column":13},"end":{"line":5,"column":32}},"4":{"start":{"line":6,"column":14},"end":{"line":7,"column":22}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":39}},"6":{"start":{"line":9,"column":14},"end":{"line":10,"column":42}},"7":{"start":{"line":11,"column":0},"end":{"line":11,"column":39}},"8":{"start":{"line":12,"column":14},"end":{"line":13,"column":43}},"9":{"start":{"line":14,"column":0},"end":{"line":14,"column":39}},"10":{"start":{"line":15,"column":14},"end":{"line":16,"column":45}},"11":{"start":{"line":17,"column":0},"end":{"line":17,"column":39}},"12":{"start":{"line":18,"column":14},"end":{"line":19,"column":38}},"13":{"start":{"line":20,"column":0},"end":{"line":20,"column":39}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-i/src/database/menus.ts","sources":["/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-i/src/database/menus.ts"],"names":[],"mappings":";;;AAAA,kCAAmC;AACnC,iCAAiC;AAGjC,MAAM,KAAK,GAAO,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,kBAAkB;IAC9D,IAAI,CAAC,YAAY,CAAC,CAAC;AACR,QAAA,KAAK,GAAQ,IAAI,WAAI,CAAC,KAAK,CAAC,CAAC;AAE1C,MAAM,KAAK,GAAM,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,QAAQ;IAChD,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;AAC5B,QAAA,KAAK,GAAE,IAAI,WAAI,CAAC,KAAK,CAAC,CAAC;AAEpC,MAAM,KAAK,GAAM,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,mBAAmB;IAC1D,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;AAC7B,QAAA,KAAK,GAAQ,IAAI,WAAI,CAAC,KAAK,CAAC,CAAC;AAE1C,MAAM,KAAK,GAAO,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,eAAe;IAChE,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;AAC/B,QAAA,KAAK,GAAQ,IAAI,WAAI,CAAC,KAAK,CAAC,CAAC;AAE1C,MAAM,KAAK,GAAO,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,cAAc;IAC5D,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;AACxB,QAAA,KAAK,GAAQ,IAAI,WAAI,CAAC,KAAK,CAAC,CAAC","sourcesContent":["import {Menu, menu} from \"../menu\";\nimport * as Dish from \"./dishes\";\n\n\nconst menu1: menu=[Dish.QuesoAsadoSetas, Dish.LentejasCompuestas,\n  Dish.PastaConAtun];\nexport const Menu1: Menu= new Menu(menu1);\n\nconst menu2:menu=[Dish.PanConTomate, Dish.Ensalada,\n  Dish.PolloNaranja, Dish.HeladoPlatano];\nexport const Menu2= new Menu(menu2);\n\nconst menu3:menu=[Dish.PanConQueso, Dish.GarbanzosCompuestos,\n  Dish.ChuletasZT, Dish.YogurFresasLimon];\nexport const Menu3: Menu= new Menu(menu3);\n\nconst menu4: menu=[Dish.TartarSalmonAguacate, Dish.EnsaladaDePasta,\n  Dish.TerneraEncebollado, Dish.MousseCasa];\nexport const Menu4: Menu= new Menu(menu4);\n\nconst menu5: menu=[Dish.AguacatesRellenos, Dish.CremaCalabacin,\n  Dish.ConejoPapas, Dish.HeladoCasa];\nexport const Menu5: Menu= new Menu(menu5);\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"8406020ae3fff61f0459757babc1ffa4510db685","contentHash":"25e45bde0d1c727b0286e1304fca1aaedd6950bb8399e0a5787ec4e75f7b796e"}}