{"version":3,"file":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-i/src/menu.ts","sources":["/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-i/src/menu.ts"],"names":[],"mappings":"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","sourcesContent":["import {Plate} from \"./plato\";\n\nexport type menu=[x:Plate, y:Plate, z:Plate, ...dimensiones:Plate[]];\n/**\n * Clase con la que representar el menu\n */\nexport class Menu {\n  constructor(private readonly menus:menu) {\n  }\n  /**\n   * Comprueba que el menu cumple con almenos 3 categorias diferentes\n   * @returns Verdadero o falso si se cumple o no la condiciÃ³n\n   */\n  comprobarMenu(): boolean {\n    let flagEntrante=false;\n    let flagPrimerplato=false;\n    let flagSegundoPlato=false;\n    let flagPostre=false;\n    let contador=0;\n    // si el contador es 3 o mayor hay 3 categorias diferentes como minimo por\n    // lo que es valido\n    this.menus.forEach((plato) => {\n      if (plato.getCategory()== \"Entrante\" && flagEntrante==false) {\n        contador++;\n        flagEntrante=true;\n      }\n      if (plato.getCategory()== \"Primer plato\" && flagPrimerplato==false) {\n        flagPrimerplato=true;\n        contador++;\n      }\n      if (plato.getCategory()== \"Segundo Plato\" && flagSegundoPlato==false) {\n        flagSegundoPlato=true;\n        contador++;\n      }\n      if (plato.getCategory()== \"Postre\" && flagPostre==false) {\n        flagPostre=true;\n        contador++;\n      }\n    });\n    if (contador<3) {\n      console.log(\"error\");\n      return false;\n    } else {\n      return true;\n    }\n  }\n  /**\n   * metodo para calcular la composicion total de los platos\n   * que conforman el menu\n   * @returns retorna la composicion total del menu\n   */\n  ComposicionNutricionalMenu() {\n    let calorias=0;\n    let proteinas= 0;\n    let hidratos= 0;\n    let lipidos= 0;\n    let composicionTotal: number[] = [];\n    for (let i = 0; i < this.menus.length; i++) {\n      calorias+=this.menus[i].getComposition()[0];\n      proteinas+= this.menus[i].getComposition()[1];\n      hidratos+= this.menus[i].getComposition()[2];\n      lipidos+= this.menus[i].getComposition()[3];\n    }\n    composicionTotal = [calorias, proteinas, hidratos, lipidos];\n    return composicionTotal;\n  }\n  /**\n   * metodo para retornar los grupos de alimentos predominantes de\n   * cada plato que contiene el menu\n   * @returns retorna la lista de grupo de alimentos\n   */\n  ListadoGruposAlimentos() {\n    const listaGrupoAlimentos: string[] = [];\n    for (let i = 0; i < this.menus.length; i++) {\n      listaGrupoAlimentos.push(this.menus[i].getPredominant());\n    }\n    return listaGrupoAlimentos;\n  }\n  /**\n   * metodo que retorna la suma del precio de cada\n   * plato que compone el menu\n   * @returns retorna el precio total del menu\n   */\n  PrecioTotal() {\n    let precio = 0;\n    for (let i = 0; i < this.menus.length; i++) {\n      precio+=this.menus[i].getPrice();\n    }\n    return precio;\n  }\n  write() {\n    for (let i = 0; i < this.menus.length; i++) {\n      console.table(this.menus[i]);\n    }\n  }\n}\n"]}